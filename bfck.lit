@code_type rust .rs
@title bfck - The Brainfuck Machine
@comment_type // %s
\
@compiler lit bfck.lit && cargo check 2>&1

@s 

# Introduction

This is an example of an implementation of the **Brainfuck-Machine**.
The main purpose of this project is to train myself in literate programming and
try out lit because of its markdown features.

@s 

# The bfck Programm

The programm consists of one main sourcefile as well as one library-file
Because we will read input from files as well as from stdin we'll need to
include some libraries.

--- includes
use std::io::Read;
use std::env;
use std::fs::File;
---

Now we can look at the main Structure of our programm.

--- src/main.rs
@{includes}
@{modules}



fn main() {
  @{try to read sourcefile}
  @{initialize variables}
  @{interprete sourcefile}
}
---

@s 

### Reading the Source file

```bfck``` takes the path to the sourcefile as its only commandline argument. The
sourcefile should contain valid brainfuck-sourcecode. Since everything is valid
brainfuck-sourcecode as long all ```[``` have a matching ```]``` we won't do
anything special here.  
In case the sourcefile-argument is missing, we'll prompt a warning and exit.

--- try to read sourcefile
let args: Vec<_> = env::args().collect();

if args.len() < 2 {
  println!("No source-file path found!");
  return;
}

let path = &args[1];
let mut file = File::open(path).expect("unable to open file");

let mut programm: Vec<u8> = Vec::new();
file.read(&mut programm).expect("could not read source-file");
---

@s 

## The tape

In order to understand what we'll be doing in the @{interprete sourcefile}
section which holds most of our programm logic we need to take a look at the
implementation of our Tape module. The following module will be declared in our
modules section

--- modules
mod tape;
---

--- src/tape.rs
pub struct Tape {
  right_tape: Vec<u8>,
  left_tape: Vec<u8>,
  switch: TapeSwitch,
  data_pointer: usize,
}

impl Tape {
  pub fn new() -> Tape {
    Tape{
      data_pointer: 0,
      right_tape: vec![0],
      left_tape: vec![0],
      switch: TapeSwitch::RIGHT,
    }
  }
  @{tape methods}
}

enum TapeSwitch {
  RIGHT,
  LEFT,
}
---

As you can see, our ``Tape`` struct holds 2 u8-vectors. These represent the
infinite tape. Since vectors only grow in one direction we'll use two of them to
represent one that can grow in both directions. The ``TapeSwitch`` enum is used
to indicate on which of our two "half-tapes" the "read-write-head" resides. 
The ``data_pointer`` variable represents the position of our "read-write-head" 
on the tape.  

@s 

### Tape methods

Now, our tape still needs a number of methods to do modification of its cell's
values and move the head around.  

The following methods move the head left and right. Thereby automatically
switching between tapes and freeing unused cells at the ends of the tape.  
If we run into one end of the tape, we append a new cell.

--- tape methods
pub fn go_right(&mut self) {
  match self.switch {
    TapeSwitch::RIGHT => {
      // Head at the right end of the tape
      if self.data_pointer == self.right_tape.len() - 1 {
        self.right_tape.push(0);
      }
      self.data_pointer += 1;
    }
    TapeSwitch::LEFT => {
      //Head at the right end of left tape
      if self.data_pointer == 0 {
        self.switch = TapeSwitch::RIGHT;
        //Head at the left end and last cell contains 0
      } else if self.data_pointer == self.left_tape.len() - 1
        && self.left_tape[self.data_pointer] == 0 {
        self.left_tape.pop();
        self.data_pointer -= 1;
      } else {
        self.data_pointer -= 1;
      }
    }
  }
}
@{go_left method}
---
the method ``pub fn go_left(&mut self)`` does analog the same.
--- go_left method --- noWeave
pub fn go_left(&mut self) {
  match self.switch {
    TapeSwitch::RIGHT => {
      //Head on the left end of the right tape
      if self.data_pointer == 0 {
        self.switch = TapeSwitch::LEFT;
      //Head on the right end and last cell contains 0
      } else if self.data_pointer == self.right_tape.len() - 1
        && self.right_tape[self.data_pointer] == 0 {
        self.right_tape.pop();
        self.data_pointer -= 1;
      } else {
        self.data_pointer -= 1;
      }
    }
    TapeSwitch::LEFT => {
      //Head on the left end of the left tape
      if self.data_pointer == self.left_tape.len() - 1 {
        self.left_tape.push(0);
      }
      self.data_pointer += 1;
    }
  }
}
---

The following methods modify or read values of the tape's cells.


Increments the current cell's value by 1.
--- tape methods +=
pub fn inc(&mut self){
  let cell: &mut u8;
  match self.switch {
    TapeSwitch::RIGHT => cell = &mut self.right_tape[self.data_pointer],
    TapeSwitch::LEFT => cell = &mut self.left_tape[self.data_pointer],
  }
  *cell = (*cell).wrapping_add(1);
}
---
decrements the current cell's value by one.
--- tape methods +=
pub fn dec(&mut self) {
  let cell: &mut u8;
  match self.switch {
    TapeSwitch::RIGHT => cell = &mut self.right_tape[self.data_pointer],
    TapeSwitch::LEFT => cell = &mut self.left_tape[self.data_pointer],
  }
  *cell = (*cell).wrapping_sub(1);
}
---
Prints the current cell's value to stdout.
--- tape methods +=
pub fn get(&self) -> u8 {
  match self.switch {
    TapeSwitch::RIGHT => self.right_tape[self.data_pointer],
    TapeSwitch::LEFT => self.left_tape[self.data_pointer],
  }
}
--- 
Sets the current cell's value to ``value``.
--- tape methods +=
pub fn put(&mut self, value: u8) {
  match self.switch {
    TapeSwitch::RIGHT => self.right_tape[self.data_pointer] = value,
    TapeSwitch::LEFT => self.left_tape[self.data_pointer] = value,
  }
}
---

@s 

## The Interpreter

Since we now have read our sourcefile and looked at our Tape datatype we can
start interpreting the code from the sourcefile.  
First we'll initialize our variables.

--- initialize variables
let mut instruction_pointer = 0;
let mut tape = tape::Tape::new();
let mut jmp_stack: Vec<usize> = Vec::new();
---

We'll keep executing until the instruction pointer reaches the end of the
brainfuck-programm. The cases ```<,>,+,-``` are pretty straight forward. Loop handling
and IO operations will be covered in a later section.
finally we need a "default" case that does nothing. This way all characters
except our 8 instructions are ignored.

--- interprete sourcefile
while instruction_pointer < programm.len() {
  match char::from(programm[instruction_pointer]) {
    '>' => tape.go_right(),
    '<' => tape.go_left(),
    '+' => tape.inc(),
    '-' => tape.dec(),
    @{loop handling}
    @{io operations}
    _ => {},
  }
  instruction_pointer += 1;
}
---
  
If we (re-)enter a loop we save the posotion of the ```instruction_pointer``` 
on the ```jmp_stack``` and proceed.  
If we don't enter a loop we go forward counting opening and cosing brackets
until we found a valid match for our opening one.

---loop handling
'[' => {
  //check if we,ll have to enter the loop
  if tape.get() != 0 {
    jmp_stack.push(instruction_pointer);
  } else {
    @{find matching closing bracket}
  }
},
']' => {
  instruction_pointer = jmp_stack.pop().expect("return jump error");
  continue; //to avoid one incrementation of instruction_pointer
},
---

To find the matching bracket we use a counter initialized with one. going forward
in the instruction list we add 1 to that counter if we find an opening bracket
and subtract one if we find a closing one. This way an unclosed bracket will lead
to an error.

--- find matching closing bracket
let mut bcount = 1;
while bcount != 0 {
  instruction_pointer += 1;
  if char::from(programm[instruction_pointer]) == '[' {
    bcount += 1;
  } else if char::from(programm[instruction_pointer]) == ']' {
    bcount -= 1;
  }
}
---

Now, the last part of our brainfuck instruction set is consists of the two io
operations. Input is read from stdin, output is written to stdout;

--- io operations
',' => {
  match std::io::stdin().bytes().next().expect("stdin IO error!") {
    Ok(value) => tape.put(value),
    Err(_) => {},
  }
},
'.' => print!("{}", char::from(tape.get())),
---
